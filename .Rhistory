knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
#if(!require("nhanesA")){
#  install.packages(c("nhanesA", "tidyverse", "knitr", "sas7bdat", "tableone" ))
#}
if(!require("nhanesA")){
install.packages(c("nhanesA", "tidyverse", "knitr", "sas7bdat", "tableone", 'survey' ))
}
library(tidyverse)
library(knitr)
library(sas7bdat)
library(tableone)
library(knitr)
library(kableExtra)
library(broom)
library(caret)
library(rpart)
library(glmnet)
library(pROC)
directory <- getwd()
directory
dat <- read.sas7bdat(paste0(directory,'/dat.sas7bdat'))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
#if(!require("nhanesA")){
#  install.packages(c("nhanesA", "tidyverse", "knitr", "sas7bdat", "tableone" ))
#}
if(!require("nhanesA")){
install.packages(c("nhanesA", "tidyverse", "knitr", "sas7bdat", "tableone", 'survey' ))
}
library(tidyverse)
library(knitr)
library(sas7bdat)
library(tableone)
library(knitr)
library(kableExtra)
library(broom)
library(caret)
library(rpart)
library(glmnet)
library(pROC)
t1 <- Sys.time()
directory <- getwd()
directory
dat <- read.sas7bdat(paste0(directory,'/dat.sas7bdat'))
hypertension_DF <- data.frame(
id = dat$KEY,
age = dat$SPAGE,
race = dat$DMQ_14_1,
gender = dat$GENDER,
born = dat$US_BORN,
diet = dat$DBQ_1,
income = dat$INC20K,
diabetes = dat$DX_DBTS,
bmi = dat$BMI,
hypertension = dat$BPQ_2,
drink = dat$ALQ_1_UNIT,
smoking = dat$SMOKER3CAT,
surveyweight = dat$CAPI_WT
)
## check the original data type
str(hypertension_DF)
## find a charactor of the data for further adjustment
summary(hypertension_DF)
factorvars <- NULL
## if the mean value of the data is smaller than 4,
## it means these data is very likely to be categorical data, adjust it to factor.
for (i in 2:length(hypertension_DF)) {
hypertension_DF[hypertension_DF[,i] == 'NaN',i] <- NA
if( mean(hypertension_DF[,i], na.rm = T) < 5 ){
## For NaN, change it to missing value first
#hypertension_DF[hypertension_DF[,i] == 'NaN',i] <- NA
hypertension_DF[,i] <- as.factor(hypertension_DF[,i])
## Record the categorical data
factorvars[i] <- names(hypertension_DF)[i]
}
}
## check the changed data type
str(hypertension_DF)
hypertension_DF$race <- as.factor(hypertension_DF$race)
levels(hypertension_DF$race) <- c('White', 'Black/African American', 'Indian (American)/Alaska Native', 'Native Hawaiian/Other Pacific Islander', 'Asian', 'Some Other Race')
levels(hypertension_DF$gender) <- c('Male', 'Female')
levels(hypertension_DF$born) <- c('US-born', 'Other')
levels(hypertension_DF$diet) <- c('Excellent', 'Very good', 'Good', 'Fair', 'Poor')
levels(hypertension_DF$income) <- c('Less than $20,000','$20,000 - $39,999','$40,000 - $59,999','$60,000 - $79,999','$80,000 - $99,999','$100,000 or more')
levels(hypertension_DF$diabetes) <- c('Diabetic dx', 'Diabetic but no dx', 'Not diabetic')
levels(hypertension_DF$hypertension) <- c('Yes', 'No')
levels(hypertension_DF$drink) <- c('Weekly', 'Monthly', 'Yearly')
levels(hypertension_DF$smoking) <- c('Weekly', 'Monthly', 'Yearly')
par(mfrow = c(1,2))
for (i in names(hypertension_DF[,-ncol(hypertension_DF)])) {
if( is.numeric(hypertension_DF[,i] ) ){
qqnorm(hypertension_DF[,i], main = i)
qqline(hypertension_DF[,i])
}
}
train_control<- trainControl(method="cv", number=3)
hypertension_DF$hypertension <- ifelse(hypertension_DF$hypertension == 'No', yes = 0, no = 1)
hypertension_DF <- na.omit(hypertension_DF)
fit_glm <- train(hypertension~., data=hypertension_DF, trControl=train_control, method="glm")
fit_glm$results$RMSE^2
fit_rf <- train(hypertension~., data=hypertension_DF, trControl=train_control, method="rf", tuneLength = 15)
data.frame(
mtry = fit_rf$results$mtry,
mse = fit_rf$results$RMSE^2
) %>%
arrange(mse)
plot(fit_rf)
set.seed(1234)
cv.shrinkage <- function(data = dat.reg, n = "fold", y = "Class", a = 1){
dd <- data[sample(nrow(data), nrow(data), replace = F),]
dat.splited <- split(dd, rep(1:n, each=nrow(dd)/(n)))
best.l <- NULL
fold.error <- NULL
for (i in 1:n) {
train <- dat.splited[-i]
train <- do.call(rbind, train)
valid <- dat.splited[[i]]
cv.lasso <- cv.glmnet(x = model.matrix(hypertension ~., train), y = as.matrix(train[,y]), nfolds = n, alpha=a, type.measure="deviance", family = "binomial", standardize = T)
l <- cv.lasso$lambda[which.min(cv.lasso$cvm)]
fit.lasso <- glmnet(x = model.matrix(hypertension ~., train), y = as.matrix(train[,y]) , family = "binomial", alpha = a, lambda = l)
pred <- predict(fit.lasso, newx = model.matrix(hypertension ~., valid), y = as.matrix(valid[,y]), type = "response")
dat.roc <- roc(valid[,y]~pred)
thres <- coords(dat.roc, "best", ret = "threshold")
pred[pred <= thres] <- 0
pred[pred > thres] <- 1
best.l[i] <- l
fold.error[i] <- mean(pred != valid[,y])
}
data.frame(
lambda = mean(best.l),
error = mean(fold.error)
)
}
dadada <- list()
for (i in 1:length(seq(0,1, by = 0.1))) {
dadada[[i]] <-tryCatch({
cv.shrinkage(data = hypertension_DF[,-1], n = 10, y = "hypertension", a = seq(0,1, by = 0.1)[i])
}, error = function(x)NA)
}
tbl.shrinkage <- cbind(
alpha = (seq(0,1, by = 0.1)),
do.call(rbind, dadada))
tbl.shrinkage %>%
xtable::xtable(digits = 4)
tbl.shrinkage[which.min(tbl.shrinkage$error),] %>%
xtable::xtable(digits = 4)
#tbl.shrinkage$error <- sqrt(tbl.shrinkage$error)
ggplot(tbl.shrinkage) +
geom_line(aes(x = alpha, y = sqrt(error)), color = 'blue') +
geom_point(aes(x = alpha, y = sqrt(error), label = lambda)) +
geom_text(aes(x = alpha, y = sqrt(error),  label = round(tbl.shrinkage$lambda, 4)), size = 3.5, hjust = 1,vjust = -0.5) +
ylab('RMSE(Cross-Validation)')
t2 <- Sys.time()
t2 - t1
tbl.shrinkage
tbl.shrinkage[which.min(tbl.shrinkage$error),]
data.frame(
mtry = fit_rf$results$mtry,
mse = fit_rf$results$RMSE^2
) %>%
arrange(mse)
data.frame(
mtry = fit_rf$results$mtry,
mse = fit_rf$results$RMSE^2
) %>%
arrange(mse) -> rf.mse
rf.mse
rf.mse
tbl.shrinkage[which.min(tbl.shrinkage$error),]
rf.mse
rf.mse[1,]
fit_glm$results$RMSE^2
tbl.shrinkage[which.min(tbl.shrinkage$error),]
rf.mse[1,]
fit_glm$results$RMSE^2
library(randomForest)
randomForest(hypertension~., data = hypertension_DF, mytry = 144)
hypertension_DF
str(hypertension_DF)
randomForest(hypertension~., data = hypertension_DF[,-1], mytry = 144)
fit_rf <- randomForest(hypertension~., data = hypertension_DF[,-1], mytry = 144)
fit_rf
plot(fit_rf)
importance(fit_rf)
importance(fit_rf) %>%
arrange(IncNodePurity)
importance(fit_rf)
barplot(importance(fit_rf))
barplot(importance(fit_rf)[,2])
barplot(importance(fit_rf)[,1])
varImpPlot(fit_rf)
importance(fit_rf)
import_rf <- importance(fit_rf)
class(import_rf)
import_rf
data.frame(import_rf)
data.frame(import_rf) %>%
arrange(IncNodePurity)
data.frame(import_rf)
import_rf <- data.frame(import_rf)
import_rf
ggplot(import_rf) +
barplot(aes(x = IncNodePurity))
IncNodePurity
import_rf
ggplot(import_rf) +
barplot(aes(x = import_rf$IncNodePurity))
ggplot(import_rf) +
barplot(aes(y = import_rf$IncNodePurity))
ggplot(import_rf) +
barplot()
import_rf
ggplot(import_rf) +
geom_bar(aes(x = IncNodePurity))
ggplot(import_rf) +
geom_col(aes(x = IncNodePurity))
ggplot(import_rf) +
geom_col(aes(x = IncNodePurity, y = names(import_rf)))
ggplot(import_rf) +
geom_col(aes(x = IncNodePurity, y = rownames(import_rf)))
plot(import_rf)
varImpPlot(fit_rf,type=2)
varImpPlot(fit_rf,type=1)
varImpPlot(fit_rf,type=2)
varImpPlot(fit_rf,type=3)
varImpPlot(fit_rf)
plot(fit_rf)
importance(fit_rf)
varImpPlot(fit_rf)
par(mfrow = c(1,2))
importance(fit_rf)
par(mfrow = c(1,2))
plot(fit_rf)
varImpPlot(fit_rf)
fit_rf <- randomForest(hypertension~., data = hypertension_DF[,-1], mytry = 144, tree = 1000)
fit_rf
importance(fit_rf)
par(mfrow = c(1,2))
plot(fit_rf)
varImpPlot(fit_rf)
importance(fit_rf)
importance(fit_rf)
par(mfrow = c(1,2))
plot(fit_rf)
varImpPlot(fit_rf)
hypertension_DF
fit_rf <- randomForest(hypertension~., data = hypertension_DF[,-c(1,13)], mytry = 144, tree = 1000)
importance(fit_rf)
par(mfrow = c(1,2))
plot(fit_rf)
varImpPlot(fit_rf)
